package com.github.daggerok.examples.kotlenide

import com.codeborne.selenide.Condition
import com.codeborne.selenide.Condition.*
import com.codeborne.selenide.Selenide.close
import com.github.daggerok.kotlenide.*
import org.junit.jupiter.api.Test
import java.net.URL

class OpenTest {

  @Test fun `should open given URL in chrome using String extension function and assert text condition`() {
    System.setProperty("selenide.browser", "chrome")
    if ("chrome" == System.getProperty("selenide.browser", "")) {
      "https://google.com".open("chrome") {
        find("body") {
          this shouldHaveText "Gmail"
          close()
        }
      }
    }
  }

  @Test fun `body should be visible assert using extensions`() {
    System.setProperty("selenide.browser", "chrome")
    if ("chrome" == System.getProperty("selenide.browser", "")) {
      "https://google.com".open("chrome") {
        find("body") shouldBe visible
        close()
      }
    }
  }

  @Test fun `not exists element should not be there`() {
    System.setProperty("selenide.browser", "chrome")
    if ("chrome" == System.getProperty("selenide.browser", "")) {
      "https://google.com".open("chrome") {
        find("body") {
          this.find(".ololo") shouldNotBe exist
          this.find(".trololo") shouldBeNot visible
          close()
        }
      }
    }
  }

  @Test fun `should open using by URL extension function`() {
    URL("https://google.com").open {
      find("body") {
        this contains "Gmail"
      }
      close()
    }
  }

  @Test fun `should open using by Pair extension function with free first key contract`() {
    ("url" to "https://google.com").open {
      find("body") {
        this has "Gmail"
      }
      close()
    }
  }

  @Test fun `should open using by Map extension function`() {
    mapOf("relativeOrAbsoluteUrl" to "https://google.com").open {
      find("body") {
        this.shouldHave(Condition.text("Gmail"))
        close()
      }
    }
  }
}
