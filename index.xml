<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>kotlenide (0.0.1)</title>
<date>2018-08-31 23:19:57 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2018-08-31 23:19:57 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./logo.png"/>
</imageobject>
<textobject><phrase>logo</phrase></textobject>
</mediaobject>
</informalfigure>
</preface>
<chapter xml:id="usage-todo">
<title>Usage (TODO)</title>
<formalpara>
<title>At the moment, my goal is implement idiomatic kotlin DSL for UI ent-to-end testing, which under the hood is using famous good known <link xl:href="http://selenide.org/">selenide</link> functionality:</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class AwesomeTests {
  @Test fun ‘selenide with idiomatic kotlin should be awesome’() {
    open("http://127.0.0.1:8080") {
      it.find("form") {
        it.find("input[type='text']") {
          it sendKeys "hola!"
        }
        it.find("button") {
          it press enter
        }
      }
    }
  }
}</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="how-to-work-in-progress">
<title>How to (work in progress)</title>
<formalpara>
<title>java: <literal>Selenide.open(String relativeOrAbsoluteUrl)</literal></title>
<para>
<programlisting language="java" linenumbering="unnumbered">  @Test
  @DispayName("should open method with String argument")
  void test() {
    open("https://google.com")
    // ...
    close()
  }</programlisting>
</para>
</formalpara>
<formalpara>
<title>kotlin: <literal>String.open { &#8230;&#8203; }</literal></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open String extension function`() {
    "https://google.com".open {
      // ...
      close()
    }
  }

  // or:

  @Test fun `should open Pair extension function with free first key name contract`() {
    ("url" to "https://google.com").open {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<formalpara>
<title>java: <literal>Selenide.open(URL absoluteUrl)</literal></title>
<para>
<programlisting language="java" linenumbering="unnumbered">  @Test
  @DispayName("should open method with URL argument")
  void test() {
    open(new URL("https://ya.ru"))
    // ...
    close()
  }</programlisting>
</para>
</formalpara>
<formalpara>
<title>kotlin: <literal>URL.open { &#8230;&#8203; }</literal></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open URL extension function`() {
    URL("https://ya.ru").open {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<formalpara>
<title>java: <literal>Selenide.open(String relativeOrAbsoluteUrl, String domain, String login, String password)</literal></title>
<para>
<programlisting language="java" linenumbering="unnumbered">  @Test
  @DispayName("should open using string arguments by some contract")
  void test() {
    open("https://blog.example.com?q=java", "example.com", "login", "password")
    // ...
    close()
  }</programlisting>
</para>
</formalpara>
<formalpara>
<title>kotlin: <literal>Map&lt;String, String&gt;.open { &#8230;&#8203; }</literal></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open Map extension function minimal contract`() {
    mapOf("relativeOrAbsoluteUrl" to "https://google.com").open {
      // ...
      close()
    }
  }

  // or:

  @Test fun `should open Map extension function full contract`() {
    mapOf(
      "relativeOrAbsoluteUrl" to "https://blog.example.com?q=java",
      "domain" to "example.com",
      "login" to "login",
      "password" to "password"
    ) {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<simpara>TODO: implement documentation&#8230;&#8203;</simpara>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/kotlenide">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/kotlenide">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>