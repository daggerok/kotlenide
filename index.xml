<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>kotlenide (0.0.2)</title>
<date>2018-09-18 01:47:23 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.2</revnumber>
<date>2018-09-18 01:47:23 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="./logo.png"/>
</imageobject>
<textobject><phrase>logo</phrase></textobject>
</mediaobject>
</informalfigure>
</preface>
<chapter xml:id="introduction">
<title>Introduction</title>
<simpara><emphasis>TODO: kotlenide is available in both&#8201;&#8212;&#8201;<link xl:href="https://maven-badges.herokuapp.com/maven-central/com.github.daggerok/kotlenide"><literal>maven central</literal></link> and <link xl:href="https://bintray.com/daggerok/daggerok/kotlenide?source=watch"><literal>bintray jcenter</literal></link> repositories</emphasis></simpara>
<note>
<simpara>Kotlenide itself is not included any selenide library,
so we assume you already have one in your project dependencies.
Otherwise&#8201;&#8212;&#8201;just add some together with kotlenide&#8230;&#8203;</simpara>
</note>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://www.bintray.com/docs/images/bintray_badge_color.png" align="left"/>
</imageobject>
<textobject><phrase>Maven</phrase></textobject>
</mediaobject>
</informalfigure>
<formalpara>
<title><link xl:href="https://bintray.com/daggerok/daggerok/kotlenide?source=watch">gradle</link></title>
<para>
<programlisting language="gradle" linenumbering="unnumbered">dependencies {
  testImplementation 'com.github.daggerok:kotlenide:0.0.2'
  // Kotlenide also requires Selenide dependency:
  testImplementation 'com.codeborne:selenide:4.14.1'
}</programlisting>
</para>
</formalpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="http://maven.apache.org/images/maven-logo-black-on-white.png" align="left"/>
</imageobject>
<textobject><phrase>Maven</phrase></textobject>
</mediaobject>
</informalfigure>
<formalpara>
<title><link xl:href="https://maven-badges.herokuapp.com/maven-central/com.github.daggerok/kotlenide">maven</link></title>
<para>
<programlisting language="xml" linenumbering="unnumbered">&lt;project&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.github.daggerok&lt;/groupId&gt;
      &lt;artifactId&gt;kotlenide&lt;/artifactId&gt;
      &lt;version&gt;0.0.2&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!-- Kotlenide also requires Selenide dependency: --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.codeborne&lt;/groupId&gt;
      &lt;artifactId&gt;selenide&lt;/artifactId&gt;
      &lt;version&gt;4.14.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;</programlisting>
</para>
</formalpara>
<formalpara>
<title>idiomatic kotlin DSL for UI ent-to-end testing, which is using famous good known <link xl:href="http://selenide.org/">selenide</link> under the hood:</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">class `Awesome Kotlenide Tests` {
  @Test fun `selenide using idiomatic kotlin should be awesome`() {
    "https://google.com".open {
      find("body") {
        this contains "G"
        this has "mail"
        close()
      }
    }
  }

  @Test fun `should open given URL in chrome and assert using infix extension functions`() {
    "https://google.com".open("chrome") {
      find("body") {
        this.find(".ololo") shouldNotBe exist
        find(".trololo") shouldBeNot visible
        this shouldHaveText "Gmail"
        close()
      }
    }
  }
}</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="how-to-work-in-progress">
<title>How to (work in progress)</title>
<simpara><emphasis role="strong">open url (String)</emphasis></simpara>
<formalpara>
<title><emphasis>java</emphasis></title>
<para>
<programlisting language="java" linenumbering="unnumbered">  @Test
  @DispayName("should open method with String argument")
  void test() {
    open("https://google.com")
    // ...
    close()
  }</programlisting>
</para>
</formalpara>
<simpara><literal>open(String relativeOrAbsoluteUrl)</literal></simpara>
<formalpara>
<title><emphasis>kotlin</emphasis></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open String extension function`() {
    "https://google.com".open {
      // ...
      close()
    }
  }

  @Test fun `in addition can open given URL in given browser`() {
    "https://google.com".open("firefox") {
      // ...
      close()
    }
  }

  @Test fun `semantically has openIn function also to open given URL in given browser`() {
    "https://google.com".openIn("chrome") {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<simpara>API:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>String.open { &#8230;&#8203; }</literal></simpara>
</listitem>
<listitem>
<simpara><literal>String.open("browserName") { &#8230;&#8203; }</literal></simpara>
</listitem>
<listitem>
<simpara><literal>String.open(browser = "&#8230;&#8203;") { &#8230;&#8203; }</literal></simpara>
</listitem>
<listitem>
<simpara><literal>String.openIn("browserName") { &#8230;&#8203; }</literal></simpara>
</listitem>
<listitem>
<simpara><literal>String.openIn(browser = "&#8230;&#8203;") { &#8230;&#8203; }</literal></simpara>
</listitem>
</itemizedlist>
<formalpara>
<title><emphasis>kotlin</emphasis></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open Pair extension function with free first key name contract`() {
    ("url" to "https://google.com").open {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<simpara><literal>Pair.open { &#8230;&#8203; }</literal></simpara>
<simpara><emphasis role="strong">open absolute url (URL)</emphasis></simpara>
<formalpara>
<title><emphasis>java</emphasis></title>
<para>
<programlisting language="java" linenumbering="unnumbered">  @Test
  @DispayName("should open method with URL argument")
  void test() {
    open(new URL("https://ya.ru"))
    // ...
    close()
  }</programlisting>
</para>
</formalpara>
<simpara><literal>open(URL absoluteUrl)</literal></simpara>
<formalpara>
<title><emphasis>kotlin</emphasis></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open URL extension function`() {
    URL("https://ya.ru").open {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<simpara><literal>URL.open { &#8230;&#8203; }</literal></simpara>
<simpara><emphasis role="strong">open by &#8230;&#8203;</emphasis></simpara>
<formalpara>
<title>java</title>
<para>
<programlisting language="java" linenumbering="unnumbered">  @Test
  @DispayName("should open using string arguments by some contract")
  void test() {
    open("https://blog.example.com?q=java", "example.com", "login", "password")
    // ...
    close()
  }</programlisting>
</para>
</formalpara>
<simpara><literal>open(String relativeOrAbsoluteUrl, String domain, String login, String password)</literal></simpara>
<formalpara>
<title><emphasis>kotlin</emphasis></title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">  @Test fun `should open Map extension function minimal contract`() {
    mapOf("relativeOrAbsoluteUrl" to "https://google.com").open {
      // ...
      close()
    }
  }

  // or:

  @Test fun `should open Map extension function full contract`() {
    mapOf(
      "relativeOrAbsoluteUrl" to "https://blog.example.com?q=java",
      "domain" to "example.com",
      "login" to "login",
      "password" to "password"
    ).open {
      // ...
      close()
    }
  }</programlisting>
</para>
</formalpara>
<simpara><literal>Map&lt;String, String&gt;.open { &#8230;&#8203; }</literal></simpara>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://kotlinlang.org/">Kotlin</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://kotlinlang.org/docs/reference/type-safe-builders.html">Kotlin DSL guide</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://kotlinlang.org/docs/reference/functions.html#infix-notation">Kotlin infix functions</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://selenide.org/">Selenide</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://www141.lunapic.com/">Awesome free online images editor LunaPic</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/kotlenide">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/kotlenide">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
<chapter xml:id="license">
<title>License</title>
<simpara><link xl:href="https://github.com/daggerok/kotlenide/blob/master/LICENSE">MIT</link></simpara>
</chapter>
</book>